    /**
 * Veridity design tokens (colors, spacing)
 * Keep in sync with Tailwind config and RN StyleSheet usage.
 */
export const colors = {
  primary: {
    600: '#0F766E',
    700: '#0B5F59',
  },
  accent: {
    500: '#F59E0B',
    400: '#FBBF24',
  },
  success: {
    600: '#16A34A',
    400: '#22C55E',
  },
  danger: {
    600: '#DC2626',
    400: '#F87171',
  },
  text: {
    primaryLight: '#111827',
    mutedLight: '#6B7280',
    primaryDark: '#F3F4F6',
    mutedDark: '#9CA3AF',
  },
  surface: {
    light: '#FFFFFF',
    altLight: '#F8FAFC',
    dark: '#0B1220',
    altDark: '#111827',
  },
  border: {
    light: '#E5E7EB',
    dark: '#1F2937',
  },
};

export const metrics = {
  radiusCard: 12,
  radiusControl: 10,
  headerHeight: 56,
  tabBarHeight: 64,
};


import * as React from 'react';
import Link from 'next/link';
import { metrics } from '../../tokens/tokens';

type HeaderType = 'root' | 'sub';

export type AppHeaderProps = {
  title: string;
  type?: HeaderType;
  leftSlot?: React.ReactNode;          // usually back button
  actions?: React.ReactNode[];         // icons/buttons (max 2)
  sticky?: boolean;
  divider?: boolean;
  className?: string;
};

export function AppHeader({
  title,
  type = 'root',
  leftSlot,
  actions = [],
  sticky = false,
  divider = false,
  className = '',
}: AppHeaderProps) {
  return (
    <header
      className={[
        'w-full flex items-center justify-between',
        'px-4 py-2',
        sticky ? 'sticky top-0 z-30 bg-white/80 backdrop-blur supports-[backdrop-filter]:bg-white/60' : 'bg-white',
        divider ? 'border-b' : '',
        'border-slate-200',
        className,
      ].join(' ')}
      style={{ height: metrics.headerHeight }}
      aria-label="App header"
    >
      <div className="flex items-center gap-2 min-w-[64px]">
        {type === 'sub' ? leftSlot : null}
      </div>
      <div className="flex-1 text-center sm:text-left">
        <h1 className="text-[18px] font-semibold text-slate-900 truncate">{title}</h1>
      </div>
      <div className="flex items-center gap-2 min-w-[64px] justify-end">
        {actions?.slice(0, 2).map((node, i) => (
          <div key={i} className="h-9 w-9 grid place-items-center rounded-md hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-slate-400">
            {node}
          </div>
        ))}
      </div>
    </header>
  );
}

// Example actions
export function BackButton({ href = '#' }: { href?: string }) {
  return (
    <Link
      href={href}
      aria-label="Back"
      className="h-9 w-9 grid place-items-center rounded-md hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-slate-400"
    >
      <span aria-hidden>←</span>
    </Link>
  );
}

export function HelpButton() {
  return (
    <Link href="/help" aria-label="Help">
      <span className="text-slate-700">?</span>
    </Link>
  );
}

import * as React from 'react';
import Link from 'next/link';

type TabItem = {
  key: string;
  label: string;
  href: string;
  icon?: React.ReactNode;
};

export type TabBarProps = {
  items: TabItem[];
  className?: string;
};

export function TabBar({ items, className = '' }: TabBarProps) {
  const pathname = (typeof window !== 'undefined') ? window.location.pathname : '/';
  return (
    <nav
      role="tablist"
      className={[
        'fixed bottom-0 left-0 right-0',
        'bg-white/95 backdrop-blur supports-[backdrop-filter]:bg-white/75',
        'border-t border-slate-200',
        'px-2 py-2',
        'flex items-center justify-between gap-1',
        className,
      ].join(' ')}
      style={{ paddingBottom: 'calc(0.5rem + env(safe-area-inset-bottom))' }}
      aria-label="Primary"
    >
      {items.map((item) => {
        const active = pathname === item.href;
        return (
          <Link
            key={item.key}
            href={item.href}
            role="tab"
            aria-current={active ? 'page' : undefined}
            className={[
              'flex-1 min-w-0',
              'flex flex-col items-center justify-center',
              'rounded-xl px-2 py-1',
              active ? 'text-emerald-700' : 'text-slate-500 hover:text-slate-700',
            ].join(' ')}
          >
            <div className="h-5 w-5 mb-0.5" aria-hidden>{item.icon ?? '•'}</div>
            <span className="text-[12px] leading-4 truncate">{item.label}</span>
            <span className={['mt-1 h-0.5 w-6 rounded-full', active ? 'bg-emerald-700' : 'bg-transparent'].join(' ')} aria-hidden />
          </Link>
        );
      })}
    </nav>
  );
}


'use client';
import React from 'react';
import { AppHeader, BackButton, HelpButton } from '../components/ui/AppHeader';
import { TabBar } from '../components/ui/TabBar';

export default function ExamplePage() {
  const tabs = [
    { key: 'home', label: 'Home', href: '/' },
    { key: 'prove', label: 'Prove', href: '/prove' },
    { key: 'share', label: 'Share', href: '/share' },
    { key: 'history', label: 'History', href: '/history' },
    { key: 'settings', label: 'Settings', href: '/settings' },
  ];
  return (
    <div className="min-h-[200vh] bg-slate-50">
      <AppHeader title="Hello, Bidur" actions={[<HelpButton key="help" />]} sticky divider />
      <main className="p-4 pb-24">
        <h2 className="text-xl font-semibold mb-2">Quick Actions</h2>
        <p className="text-slate-600">Your data stays on your device.</p>
      </main>
      <TabBar items={tabs} />
    </div>
  );
}


/** Tailwind config excerpt for Veridity palette */
module.exports = {
  content: ['./app/**/*.{ts,tsx}', './components/**/*.{ts,tsx}'],
  theme: {
    extend: {
      colors: {
        primary: {
          600: '#0F766E',
          700: '#0B5F59',
        },
        accent: {
          500: '#F59E0B',
          400: '#FBBF24',
        },
        success: {
          600: '#16A34A',
          400: '#22C55E',
        },
        danger: {
          600: '#DC2626',
          400: '#F87171',
        },
        surface: {
          DEFAULT: '#FFFFFF',
          alt: '#F8FAFC',
          dark: '#0B1220',
          altDark: '#111827',
        },
        border: {
          DEFAULT: '#E5E7EB',
          dark: '#1F2937',
        },
      },
      borderRadius: {
        card: '12px',
        control: '10px',
      },
    },
  },
};

/**
 * Veridity design tokens (colors, spacing)
 * Keep in sync with Tailwind config and RN StyleSheet usage.
 */
export const colors = {
  primary: {
    600: '#0F766E',
    700: '#0B5F59',
  },
  accent: {
    500: '#F59E0B',
    400: '#FBBF24',
  },
  success: {
    600: '#16A34A',
    400: '#22C55E',
  },
  danger: {
    600: '#DC2626',
    400: '#F87171',
  },
  text: {
    primaryLight: '#111827',
    mutedLight: '#6B7280',
    primaryDark: '#F3F4F6',
    mutedDark: '#9CA3AF',
  },
  surface: {
    light: '#FFFFFF',
    altLight: '#F8FAFC',
    dark: '#0B1220',
    altDark: '#111827',
  },
  border: {
    light: '#E5E7EB',
    dark: '#1F2937',
  },
};

export const metrics = {
  radiusCard: 12,
  radiusControl: 10,
  headerHeight: 56,
  tabBarHeight: 64,
};


import React from 'react';
import { View, Text, Pressable, StyleSheet } from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { colors, metrics } from '../tokens';

type HeaderType = 'root' | 'sub';

export type AppHeaderProps = {
  title: string;
  type?: HeaderType;
  onBack?: () => void;
  actions?: React.ReactNode[];
  divider?: boolean;
};

export const AppHeader: React.FC<AppHeaderProps> = ({
  title,
  type = 'root',
  onBack,
  actions = [],
  divider = false,
}) => {
  const insets = useSafeAreaInsets();
  return (
    <View style={[
      styles.container,
      { paddingTop: insets.top },
      divider && styles.divider,
    ]} accessibilityRole="header" accessibilityLabel="App header">
      <View style={styles.side}>
        {type === 'sub' && (
          <Pressable
            onPress={onBack}
            accessibilityRole="button"
            accessibilityLabel="Back"
            style={styles.iconBtn}
          >
            <Text style={styles.icon}>{'←'}</Text>
          </Pressable>
        )}
      </View>
      <View style={styles.center}>
        <Text numberOfLines={1} style={styles.title}>{title}</Text>
      </View>
      <View style={[styles.side, { justifyContent: 'flex-end' }]}>
        {actions.slice(0, 2).map((node, i) => (
          <View key={i} style={styles.iconBtn}>{node}</View>
        ))}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    backgroundColor: colors.surface.light,
    minHeight: metrics.headerHeight,
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
  },
  divider: {
    borderBottomColor: colors.border.light,
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
  side: {
    width: 64,
    height: 40,
    flexDirection: 'row',
    alignItems: 'center',
  },
  center: {
    flex: 1,
  },
  title: {
    fontSize: 18,
    fontWeight: '600',
    color: colors.text.primaryLight,
  },
  iconBtn: {
    width: 36,
    height: 36,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
  },
  icon: {
    fontSize: 18,
    color: colors.text.primaryLight,
  },
});

import React from 'react';
import { View, Text, Pressable, StyleSheet } from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { colors } from '../tokens';

export type TabItem = {
  key: string;
  label: string;
  icon?: React.ReactNode;
  onPress: () => void;
  active?: boolean;
};

export type TabBarProps = {
  items: TabItem[];
};

export const TabBar: React.FC<TabBarProps> = ({ items }) => {
  const insets = useSafeAreaInsets();
  return (
    <View
      accessibilityRole="tablist"
      style={[
        styles.container,
        { paddingBottom: insets.bottom + 8 }
      ]}
    >
      {items.map((item) => (
        <Pressable
          key={item.key}
          accessibilityRole="tab"
          accessibilityState={{ selected: !!item.active }}
          onPress={item.onPress}
          style={styles.item}
        >
          <View style={styles.iconWrap}>
            {item.icon ?? <Text>•</Text>}
          </View>
          <Text numberOfLines={1} style={[styles.label, item.active ? styles.active : styles.inactive]}>
            {item.label}
          </Text>
          <View style={[styles.indicator, item.active ? styles.indicatorActive : null]} />
        </Pressable>
      ))}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: colors.surface.light,
    borderTopWidth: StyleSheet.hairlineWidth,
    borderTopColor: colors.border.light,
    flexDirection: 'row',
    paddingHorizontal: 8,
    paddingTop: 8,
  },
  item: {
    flex: 1,
    minWidth: 0,
    alignItems: 'center',
    paddingVertical: 4,
    borderRadius: 12,
  },
  iconWrap: { height: 20, width: 20, marginBottom: 2, alignItems: 'center', justifyContent: 'center' },
  label: { fontSize: 12 },
  active: { color: colors.primary[600] },
  inactive: { color: '#6B7280' },
  indicator: { marginTop: 4, height: 2, width: 24, borderRadius: 9999, backgroundColor: 'transparent' },
  indicatorActive: { backgroundColor: colors.primary[600] },
});

import React from 'react';
import { View, Text } from 'react-native';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import { AppHeader } from '../components/AppHeader';
import { TabBar } from '../components/TabBar';

export default function App() {
  const [active, setActive] = React.useState('home');
  const items = [
    { key: 'home', label: 'Home', onPress: () => setActive('home'), active: active==='home' },
    { key: 'prove', label: 'Prove', onPress: () => setActive('prove'), active: active==='prove' },
    { key: 'share', label: 'Share', onPress: () => setActive('share'), active: active==='share' },
    { key: 'history', label: 'History', onPress: () => setActive('history'), active: active==='history' },
    { key: 'settings', label: 'Settings', onPress: () => setActive('settings'), active: active==='settings' },
  ];
  return (
    <SafeAreaProvider>
      <AppHeader title="Hello, Bidur" />
      <View style={{ flex: 1, padding: 16 }}>
        <Text>Screen: {active}</Text>
      </View>
      <TabBar items={items} />
    </SafeAreaProvider>
  );
}


